// <auto-generated />
using System;
using Backend.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Migrations
{
    [DbContext(typeof(BackendDbContext))]
    [Migration("20200717055632_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Backend.Entities.FJ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BusinessAdvicePublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DigEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DigPaidDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DigProtocoledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DigStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DocumentReviewCompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DocumentSubmitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("EstimateArea")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EstimateFinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExploreEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExplorePaidDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExploreStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FinishNoticePublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("ImpactSituationItems")
                        .HasColumnType("text[]");

                    b.Property<int>("LandPropertyIndex")
                        .HasColumnType("integer");

                    b.Property<string>("LandPropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LetterDateBeforeDig")
                        .HasColumnType("text");

                    b.Property<string>("LocationDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjPropertyIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ProjPropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProtocoledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Situation")
                        .HasColumnType("text");

                    b.Property<string>("StageReport")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UnProtocoledReason")
                        .HasColumnType("text");

                    b.Property<int?>("UnProtocoledReasonIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WorkInfoPublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("FJs");
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Realname")
                        .HasColumnType("text");

                    b.Property<string>("RegionCode")
                        .HasColumnType("text");

                    b.Property<string>("RegionIndex")
                        .HasColumnType("text");

                    b.Property<string>("RegionName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
